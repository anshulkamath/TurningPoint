#include "robot-config.h"
#include <string>
#include <iostream>
#include <vector>
#include <math.h>
#include <sstream>

using namespace std;
using namespace vex;

// Global Variables
double PI = 3.1415;
double wheelDiameter = 4;
double wheelBaseLength = 9.5;

// Auton Selector
string side = "RED";
int autonNum = 1; // 0 is close to flags, 1 is far from flags
bool park = true;

string toString1(double val)
{
    ostringstream v;
    v << val;
    return v.str();
}     

void autonPark()
{
    if (Brain.Screen.xPosition() <= 240) park = true;
    else if (Brain.Screen.xPosition() > 240) park = false;
    
    Brain.Screen.clearScreen();
    Brain.Screen.print("Side: %s, AutonNum: %d, Park: %d", side.c_str(), autonNum, park);
}

void autonSelect()
{
    if(Brain.Screen.xPosition() <= 240) autonNum = 0;
    else if(Brain.Screen.xPosition() >= 241) autonNum = 1;
    
    Brain.Screen.clearScreen();
    Brain.Screen.drawLine(240, 0, 240, 480);
    Brain.Screen.printAt(100, 136, "PARK");
    Brain.Screen.printAt(340, 136, "NO PARK");
    Brain.Screen.pressed(autonPark);
}

void sideSelect()
{
    if(Brain.Screen.xPosition() <= 240) side = "BLUE";
    else if(Brain.Screen.xPosition() >= 241) side = "RED";
    
    Brain.Screen.clearScreen();
    Brain.Screen.setPenColor(vex::color::red);
    Brain.Screen.drawRectangle(0, 0, 240, 272, vex::color::white);
    Brain.Screen.drawRectangle(241, 0, 480, 272, vex::color::black);
    Brain.Screen.printAt(100, 136, "FRONT");
    Brain.Screen.printAt(340, 136, "BACK");
    Brain.Screen.pressed(autonSelect);
}

void pre_auton( void )
{   
    // Brain Screen: 480 x 272
    Brain.Screen.clearScreen();
    Brain.Screen.setPenColor(vex::color::black);
    Brain.Screen.drawRectangle(0, 0, 240, 272, vex::color::blue);
    Brain.Screen.drawRectangle(241, 0, 480, 272, vex::color::red);
    Brain.Screen.pressed(sideSelect);
}

void ramp(int vel, int cycles, double inches, bool rampUp = true)
{
    FrontLeft.setStopping(brakeType::coast);
    FrontRight.setStopping(brakeType::coast);
    BackLeft.setStopping(brakeType::coast);
    BackRight.setStopping(brakeType::coast); 

    // rampUp assumes going to or coming from 0
    double rots = inches / (wheelDiameter * PI); // converting inches to revolutions
    double rotsPerCycle = rots / cycles;
    double targVel, initRots;

    // setting rotations to negative to account for moving backwards
    if (vel < 0) rots *= -1;

    for (int i = 0; i < cycles; i++)
    {
        // encoder value in revolutions at the beginning of each iteration
        initRots = FrontRight.rotation(rotationUnits::rev);

        // setting the velocity based on the iteration of the loop
        if (rampUp)
            targVel = vel / cycles * (i + 1);
        else
            targVel = vel - (vel / cycles * (i + 1));

        // spins motors at a velocity for a number of revolutions
        BackLeft.spin(directionType::fwd, targVel, velocityUnits::pct);
        BackRight.spin(directionType::fwd, targVel, velocityUnits::pct);
        FrontLeft.spin(directionType::fwd, targVel, velocityUnits::pct);
        FrontRight.spin(directionType::fwd, targVel, velocityUnits::pct);
        while (FrontRight.rotation(rotationUnits::rev) - initRots < rotsPerCycle);
    }

    if (!rampUp)
    {
        FrontLeft.stop(brakeType::brake);
        FrontRight.stop(brakeType::brake);
        BackLeft.stop(brakeType::brake);
        BackRight.stop(brakeType::brake);
    }
}

int rampUp(double deltaV, int cycles, int timeSlice)
{
    double currVel = FrontRight.velocity(velocityUnits::pct);
    FrontRight.resetRotation();
    
    for (int i = 0; i < cycles; i++)
    {
        BackLeft.spin(directionType::fwd, currVel + (deltaV/cycles), velocityUnits::pct);
        BackRight.spin(directionType::fwd, currVel + (deltaV/cycles), velocityUnits::pct);
        FrontLeft.spin(directionType::fwd, currVel + (deltaV/cycles), velocityUnits::pct);
        FrontRight.spin(directionType::fwd, currVel + (deltaV/cycles), velocityUnits::pct);
        
        task::sleep(timeSlice);
    }
    
    return FrontRight.rotation(rotationUnits::rev);
}

void rampDown(int rots, int cycles, int vel = 0)
{
    int currVel;
    FrontRight.resetRotation();
    for(int i = 0; i < cycles; i++)
    {
        currVel = FrontRight.velocity(velocityUnits::pct);
        
        BackLeft.spin(directionType::fwd, currVel - (vel/cycles), velocityUnits::pct);
        BackRight.spin(directionType::fwd, currVel - (vel/cycles), velocityUnits::pct);
        FrontLeft.spin(directionType::fwd, currVel - (vel/cycles), velocityUnits::pct);
        FrontRight.spin(directionType::fwd, currVel - (vel/cycles), velocityUnits::pct);
        
        while(FrontRight.rotation(rotationUnits::rev) < rots/cycles);
        FrontRight.resetRotation();
    }
    BackLeft.stop(brakeType::brake);
    BackRight.stop(brakeType::brake);
    FrontLeft.stop(brakeType::brake);
    FrontRight.stop(brakeType::brake);
}

void forwardRamp(double inches, double speed = 60, int rampCycles = 10,  int timeSlice = 10)
{
    int rots = inches / wheelDiameter * PI;
    int initRots = rampUp(60, rampCycles, timeSlice);
    int rampDownConst = 100;
    
    FrontLeft.rotateFor(rots - initRots - rampDownConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots - initRots - rampDownConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots - initRots - rampDownConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots - initRots - rampDownConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, true);
    
    rampDown(rampDownConst, 2);
}

void forward1(double inches, double speed = 70)
{
    FrontLeft.setStopping(brakeType::coast);
    FrontRight.setStopping(brakeType::coast);
    BackLeft.setStopping(brakeType::coast);
    BackRight.setStopping(brakeType::coast);         
    double rots = inches/(wheelDiameter*PI);
    double start = FrontLeft.rotation(rotationUnits::rev);
    /*FrontLeft.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, true);*/
    while(FrontLeft.rotation(rotationUnits::rev) - start < rots)
    {
        double frac = (FrontLeft.rotation(rotationUnits::rev) - start)/(start + rots);
        double speeddy = 1- 16*(pow(frac-.5, 2));
        FrontLeft.spin(directionType::fwd, speeddy*speed, velocityUnits::pct);
        FrontRight.spin(directionType::fwd, speeddy*speed, velocityUnits::pct);
        BackLeft.spin(directionType::fwd, speeddy*speed, velocityUnits::pct);
        BackRight.spin(directionType::fwd, speeddy*speed, velocityUnits::pct);

    }
    FrontLeft.stop(brakeType::coast);
    FrontRight.stop(brakeType::coast);
    BackLeft.stop(brakeType::coast);
    BackRight.stop(brakeType::coast);
}

void backward1(double inches, double speed = 70)
{
    FrontLeft.setStopping(brakeType::coast);
    FrontRight.setStopping(brakeType::coast);
    BackLeft.setStopping(brakeType::coast);
    BackRight.setStopping(brakeType::coast);         
    double rots = inches/(wheelDiameter*PI);
    double start = FrontLeft.rotation(rotationUnits::rev);
    /*FrontLeft.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots, vex::rotationUnits::rev, speed/8, vex::velocityUnits::pct, true);*/
    while(FrontLeft.rotation(rotationUnits::rev) - start > -rots)
    {
        double frac = (FrontLeft.rotation(rotationUnits::rev) - start)/(start - rots);
        double speeddy = 1- 16*(pow(frac-.5, 2));

        FrontRight.spin(directionType::rev, speeddy*speed, velocityUnits::pct);
        BackLeft.spin(directionType::rev, speeddy*speed, velocityUnits::pct);
        BackRight.spin(directionType::rev, speeddy*speed, velocityUnits::pct);
        FrontLeft.spin(directionType::rev, speeddy*speed, velocityUnits::pct);        

    }
    FrontLeft.stop(brakeType::coast);
    FrontRight.stop(brakeType::coast);
    BackLeft.stop(brakeType::coast);
    BackRight.stop(brakeType::coast);
}
void forward(double inches, double speed = 70)
{
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);        
    double rots = inches/(wheelDiameter*PI);
    double rampConst = (double)(200) / 360;

    rampConst = 0;


    FrontLeft.rotateFor(rots - 2.5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots - 2.5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots - 2.5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots - 2.5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, true);

}

void backward(double inches, double speed = 50)
{

    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);      
    double rots = inches/(wheelDiameter*PI);
    double rampConst = (double)(300) / 360;

    rampConst = 0;

    FrontLeft.rotateFor(-rots + 5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(-rots + 5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(-rots + 5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackRight.rotateFor(-rots + 5*rampConst, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, true);

}

void turnLeft(double degrees)
{
    double rots = (degrees/360) * ((wheelBaseLength*PI)/(wheelDiameter*PI)) * 90/86;  
    FrontLeft.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, true);    
}

void turnRight(double degrees)
{
    double rots = (degrees/360) * ((wheelBaseLength*PI)/(wheelDiameter*PI)) * 90/86;

    FrontLeft.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackRight.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, true);    
}

// Tasks


// Drive Variables
double turnLimiter = .6;
bool braked = false;
bool inverted = false;

int sign(double val)
{
    return val < 0 ? -1 : 1;
}

// Drive Task
int taskDrive()
{
    while (true)
    {
        int frontLeftValue = 0, 
        frontRightValue = 0, 
        backLeftValue = 0, 
        backRightValue = 0;        
        // Constant Straight Drive Control
        if (Controller1.ButtonR1.pressing())
            frontLeftValue = frontRightValue = backLeftValue = backRightValue = 40;
        else if (Controller1.ButtonR2.pressing())
            frontLeftValue = frontRightValue = backLeftValue = backRightValue = -40;       

        // Throttled Tank Drive Controls
        else
        {
            // Scale = x^2/100
            if (abs(Controller1.Axis2.value()) > 20)
            {
                frontRightValue = Controller1.Axis2.value() / 1;
                backRightValue = frontRightValue;
            }
            if (abs(Controller1.Axis3.value()) > 20)
            {
                frontLeftValue  = Controller1.Axis3.value() / 1;
                backLeftValue = frontLeftValue;
            }
        }
        if(abs(abs(Controller1.Axis2.value()) - abs(Controller1.Axis3.value())) > 20)
        {
            frontLeftValue = backLeftValue = Controller1.Axis3.value();
            frontRightValue = backRightValue = Controller1.Axis2.value();
        }
        // Throttling Turns
        if(abs(Controller1.Axis2.value() - Controller1.Axis3.value()) > 50)
        {
            frontLeftValue = backLeftValue *= turnLimiter; 
            frontRightValue = backRightValue *= turnLimiter; 
        }

        // Inverting Drive
        /*if(Controller1.ButtonLeft.pressing())
        {
            frontLeftValue = backLeftValue *= -1;
            backRightValue = frontRightValue *= -1;

            inverted = !inverted;
            while (Controller1.ButtonLeft.pressing());
        }*/

        // Enables Brake Mode
        if (Controller1.ButtonDown.pressing())
        {
            if(!braked) 
            {
                FrontLeft.setStopping(brakeType::hold);
                FrontRight.setStopping(brakeType::hold);
                BackLeft.setStopping(brakeType::hold);
                BackRight.setStopping(brakeType::hold);    
            }
            else
            {
                FrontLeft.setStopping(brakeType::coast);
                FrontRight.setStopping(brakeType::coast);
                BackLeft.setStopping(brakeType::coast);
                BackRight.setStopping(brakeType::coast);                 
            }
            braked = !braked;

            while (Controller1.ButtonDown.pressing());
        }

        // Sets Motor Powers
        FrontLeft.spin(directionType::fwd, frontLeftValue, velocityUnits::pct);
        FrontRight.spin(directionType::fwd, frontRightValue, velocityUnits::pct);
        BackLeft.spin(directionType::fwd, backLeftValue, velocityUnits::pct);
        BackRight.spin(directionType::fwd, backRightValue, velocityUnits::pct);

        task::sleep(20);
    }
    return 0;
}

// Shooter Variables
bool inUse = false;
bool inTakeInUse = false;
bool fire = false;
bool catapultDown = false;
double errorB = 0.1;
double errorX = 0.0185;

// Shooter Task
int taskShooter()
{
    while(true)
    {
        /*
        if(Controller1.ButtonX.pressing() || fire)
        {
            fire = false;
            inUse = true;
            // Rotates until slip
            Shooter.rotateFor(100, rotationUnits::raw, 100, velocityUnits::pct);
            ShooterAux.rotateFor(100, rotationUnits::raw, 100, velocityUnits::pct);

            // Rotates back to original position
            Shooter.spin(directionType::fwd, 100, velocityUnits::pct);
            ShooterAux.spin(directionType::fwd, 100, velocityUnits::pct);
            while(Limit1.pressing() && inUse); // assumes that catapult starts in the up position
            catapultDown = false;
            while(!Limit1.pressing() && inUse) {};
            catapultDown = true;

            Shooter.stop();
            ShooterAux.stop();
            inUse = false;
        }
        */
        
        
        if (Controller1.ButtonX.pressing() || fire)
        {
            fire = false;
            inUse = true;
            // Rotates until slip
            Shooter.setStopping(brakeType::brake);
            ShooterAux.setStopping(brakeType::brake);
            Shooter.rotateFor(3 + errorX, rotationUnits::rev, 100, velocityUnits::pct, false);
            ShooterAux.rotateFor(3 + errorX, rotationUnits::rev, 100, velocityUnits::pct, true);
            task::sleep(10);
            Shooter.setStopping(brakeType::coast);
            ShooterAux.setStopping(brakeType::coast);
            inUse = false;
        }else if(Controller1.ButtonB.pressing())
        {
            Shooter.setStopping(brakeType::brake);
            ShooterAux.setStopping(brakeType::brake);
            Shooter.rotateFor(3 - 0.04, rotationUnits::rev, 100, velocityUnits::pct, false);
            ShooterAux.rotateFor(3 - 0.04, rotationUnits::rev, 100, velocityUnits::pct, true);
            task::sleep(10);
            Shooter.setStopping(brakeType::coast);
            ShooterAux.setStopping(brakeType::coast);            
        }
        else if (Controller1.ButtonY.pressing())
        {
            Shooter.spin(directionType::fwd, 60, velocityUnits::pct);
            ShooterAux.spin(directionType::fwd, 60, velocityUnits::pct);
            while(Controller1.ButtonY.pressing());
            Shooter.stop(brakeType::coast);
            ShooterAux.stop(brakeType::coast);
        }
        else
        {
            Shooter.stop(brakeType::coast);
            ShooterAux.stop(brakeType::coast);
        }


        task::sleep(50);
    }
    return 0;
}

int taskIntakes()
{
    while (true)
    {
        // Controls intake
        if (Controller1.ButtonL1.pressing())
            Intake.spin(directionType::fwd, 100, velocityUnits::pct);
        else if(Controller1.ButtonL2.pressing())
            Intake.spin(directionType::rev, 100, velocityUnits::pct);
        else if(!inTakeInUse)
            Intake.stop(brakeType::hold);
    }
    return 0;
}

// Front - 3 Flags 1 Cap
void autonFunc1(string side)
{
    // Setup for Auton
    task shooterTask = task(taskShooter, 1);
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);    
    Intake.spin(directionType::fwd, 100, velocityUnits::pct);

    backward(36, 30); // Back into the ball

    task::sleep(600); // Wait for ball to get into intake

    forward(36, 40); // Drive forward
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);
    task::sleep(600);
    //backward(8,30); // Drive backwards to aim at flags

    if(side == "RED")
        turnRight(95);
    else
        turnLeft(95);

    forward(20, 30); // Shoot flags
    task::sleep(250);

    fire = true;
    task::sleep(500);
    if(side == "RED")
        turnLeft(5);
    else
        turnRight(5);

    forward(30, 60); // Drive into bottom flags
    task::sleep(200);
    backward(30, 60);
}

// Front - 2 Flags 2 Caps
void autonFunc2(string side)
{
    // Setup
    task shooterTask = task(taskShooter, 1);
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);    

    // Set up catapult and back into the ball
    fire = true;
    backward(36, 40);

    // Intake the ball and flip the cap
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);
    task::sleep(300);
    Intake.spin(directionType::fwd, 100, velocityUnits::pct);
    task::sleep(600);    

    // Forward, center on wall, backwards
    forward(43.5, 80);
    task::sleep(600);
    backward(8);

    // Turn towards flags
    if(side == "RED")
        turnRight(100);
    else
        turnLeft(100);

    // Forward to get into position to shoot
    forward(20, 40);
    task::sleep(250);

    // Fire
    Shooter.rotateFor(200, rotationUnits::deg, 100, velocityUnits::pct);
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);

    // Turn towards the next cap
    if(side == "RED")
        turnRight(55.5);
    else
        turnLeft(55.5);

    // Drive into the cap
    forward(34, 50);
}

// Back - Flip Caps
void autonFunc3(string side)
{
    // Setup for Auton
    task shooterTask = task(taskShooter, 1);
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);    
    
    // Start intake and get ball under cap
    Intake.spin(directionType::fwd, 100, velocityUnits::pct);
    backward(36, 30); // Back into the ball
    task::sleep(600); // Wait for ball to get into intake
    Intake.stop();    // Stop the intake

    // Forward and turn to the next cap
    forward(6, 30);
    side == "RED" ? turnRight(70) : turnLeft(70);

    // Reverse into the cap to flip it
    Intake.spin(directionType::rev, 100, velocityUnits::pct);
    backward(25, 35);
    Intake.stop(brakeType::hold);

    // Park
    forward(19, 40);
    if(park)
    {
        side == "RED" ? turnRight(30) : turnLeft(30);
        forward(50, 60); // Drive onto the platform
    }
}
void autonFunc4(string side)
{  
    ramp(60, 5, 36);
    task::sleep(1000);
    FrontLeft.stop();
    FrontRight.stop();
    BackLeft.stop();
    BackRight.stop();
    /*
    backward(36, 40);    
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);
    task::sleep(300);
    Intake.spin(directionType::fwd, 100, velocityUnits::pct);
    task::sleep(1000);
    Intake.stop(brakeType::coast);  
    forward(10, 40);
    turnLeft(90);
    forward(30, 100);
    */

}
void autonomous( void ) {
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);
    
    
    if (autonNum == 0) autonFunc1(side);
    else autonFunc3(side);
    
}

void usercontrol() {

    vex::task(taskShooter, 1);
    vex::task(taskDrive, 1);
    vex::task(taskIntakes, 1);
    FrontLeft.setStopping(brakeType::coast);
    FrontRight.setStopping(brakeType::coast);
    BackLeft.setStopping(brakeType::coast);
    BackRight.setStopping(brakeType::coast);   
    Controller1.Screen.clearScreen();
    while(true)
    {
        if(Controller1.ButtonA.pressing())
        {
            Shooter.stop(brakeType::coast);
            ShooterAux.stop(brakeType::coast);  
            inUse = false;
        }

        Controller1.Screen.print("Braked: %d", braked);        
        Controller1.Screen.newLine();
        Controller1.Screen.print("Inverted: %d", inverted);        
        Controller1.Screen.newLine();
        int temp = Brain.Battery.capacity(percentUnits::pct);
        Controller1.Screen.print("Battery: %d", temp);        

        task::sleep(5000);
    }
}

int main() {

    //Run the pre-autonomous function. 
    pre_auton();

    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
        vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
    return 0;

}
