#include "robot-config.h"
#include <string>
#include <iostream>
#include <vector>
#include <math.h>
#include <sstream>

using namespace std;
using namespace vex;

// Global Variables
double PI = 3.1415;
double wheelDiameter = 4;
double wheelBaseLength = 9.5;

// Auton Selector
string side = "RED";
int autonNum = 0; // 0 is close to flags, 1 is far from flags

string toString1(double val)
{
    ostringstream v;
    v << val;
    return v.str();
}     

void sideSelect()
{
    if(Brain.Screen.xPosition() <= 240) side = "BLUE";
    else if(Brain.Screen.xPosition() >= 241) side = "RED";
}

void autonSelect()
{
    if(Brain.Screen.xPosition() <= 240) autonNum = 0;
    else if(Brain.Screen.xPosition() >= 241) autonNum = 1;
}

void pre_auton( void ) {   

    Brain.Screen.setPenColor(vex::color::blue);
    Brain.Screen.drawRectangle(0, 0, 240, 272, vex::color::blue);
    Brain.Screen.drawRectangle(241, 0, 480, 272, vex::color::red); 
    Brain.Screen.pressed(sideSelect);
    Brain.Screen.clearScreen();
    Brain.Screen.drawRectangle(0, 0, 240, 272, vex::color::white);
    Brain.Screen.drawRectangle(241, 0, 480, 272, vex::color::black);
    Brain.Screen.pressed(autonSelect);
    Brain.Screen.clearScreen();
}

// Autonomous Functions

void forward(double inches, double speed = 70)
{
    double rots = inches/(wheelDiameter*PI);
    FrontLeft.rotateFor(rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, true);    
}

void backward(double inches, double speed = 50)
{
    double rots = inches/(wheelDiameter*PI);
    FrontLeft.rotateFor(-rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(-rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(-rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, false);
    BackRight.rotateFor(-rots, vex::rotationUnits::rev, speed, vex::velocityUnits::pct, true);        
}

void turnLeft(double degrees)
{
    double rots = (degrees/360) * ((wheelBaseLength*PI)/(wheelDiameter*PI)) * 90/86;
    
    FrontLeft.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackRight.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, true);    
}

void turnRight(double degrees)
{
    double rots = (degrees/360) * ((wheelBaseLength*PI)/(wheelDiameter*PI)) * 90/86;
    
    FrontLeft.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackLeft.rotateFor(rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    FrontRight.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, false);
    BackRight.rotateFor(-rots, vex::rotationUnits::rev, 35, vex::velocityUnits::pct, true);    
}

// Tasks


// Drive Variables
double turnLimiter = .75;
bool braked = false;
bool inverted = false;
int frontLeftValue = 0, 
    frontRightValue = 0, 
    backLeftValue = 0, 
    backRightValue = 0;

// Drive Task
int taskDrive()
{
    while (true)
    {
        // Constant Straight Drive Control
        if (Controller1.ButtonR1.pressing())
            frontLeftValue = frontRightValue = backLeftValue = backRightValue = 40;
        else if (Controller1.ButtonR2.pressing())
            frontLeftValue = frontRightValue = backLeftValue = backRightValue = -40;       
        
        // Throttled Tank Drive Controls
        else
        {
            // Scale = x^2/100
            if (abs(Controller1.Axis2.value()) > 20)
                frontRightValue = backRightValue = Controller1.Axis2.value() * Controller1.Axis2.value() / 100;
            if (abs(Controller1.Axis3.value()) > 20)
                frontLeftValue = frontLeftValue = Controller1.Axis3.value() * Controller1.Axis3.value() / 100;
        }
        
        // Throttling Turns
        if(abs(Controller1.Axis2.value() - Controller1.Axis3.value()) > 50)
        {
            frontLeftValue = frontRightValue *= turnLimiter; 
            backLeftValue = backRightValue *= turnLimiter; 
        }

        // Inverting Drive
        if(Controller1.ButtonLeft.pressing())
        {
            frontLeftValue = frontRightValue *= -1;
            backLeftValue = backRightValue *= -1;
            inverted = !inverted;
            while (Controller1.ButtonL1.pressing());
        }
        
        // Enables Brake Mode
        if (Controller1.ButtonDown.pressing())
        {
            if(!braked) 
            {
                FrontLeft.setStopping(brakeType::hold);
                FrontRight.setStopping(brakeType::hold);
                BackLeft.setStopping(brakeType::hold);
                BackRight.setStopping(brakeType::hold);    
            }
            else
            {
                FrontLeft.setStopping(brakeType::coast);
                FrontRight.setStopping(brakeType::coast);
                BackLeft.setStopping(brakeType::coast);
                BackRight.setStopping(brakeType::coast);                 
            }
            braked = !braked;
            
            while (Controller1.ButtonDown.pressing());
        }
        
        // Sets Motor Powers
        FrontLeft.spin(directionType::fwd, frontLeftValue, velocityUnits::pct);
        FrontRight.spin(directionType::fwd, frontRightValue, velocityUnits::pct);
        BackLeft.spin(directionType::fwd, backRightValue, velocityUnits::pct);
        BackRight.spin(directionType::fwd, backLeftValue, velocityUnits::pct);
        
        task::sleep(20);
    }
    return 0;
}

// Shooter Variables
bool inUse = false;
bool inTakeInUse = false;
bool fire = false;

// Shooter Task
int taskShooter()
{
    while(true)
    {
        if(Controller1.ButtonX.pressing() || fire)
        {
            fire = false;
            inUse = true;
            Shooter.spin(directionType::fwd, 100, velocityUnits::pct);
            while(Limit1.pressing()); // assumes that catapult starts in the up position
            while(!Limit1.pressing());
            
            Shooter.stop();
            inUse = false;
        }
    }
    return 0;
}

int taskIntakes()
{
    while (true)
    {
        // Controls intake
        if (Controller1.ButtonL1.pressing())
            Intake.spin(directionType::fwd, 100, velocityUnits::pct);
        else if(Controller1.ButtonL2.pressing())
            Intake.spin(directionType::rev, 100, velocityUnits::pct);
        else if(!inTakeInUse)
            Intake.stop(brakeType::hold);
       
        if(Controller1.ButtonUp.pressing())
           Flipper.spin(directionType::fwd, 100, velocityUnits::pct);
        else if(Controller1.ButtonDown.pressing())
           Flipper.spin(directionType::rev, 100, velocityUnits::pct);
        else
           Flipper.stop(brakeType::hold);   
    }
    return 0;
}

// Front - 3 Flags 1 Cap
void autonFunc1(string side)
{
    // Setup for Auton
    task shooterTask = task(taskShooter, 1);
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);    
    Intake.spin(directionType::fwd, 100, velocityUnits::pct);
    
    
    fire = true;
    backward(36, 40); // Back into the ball
    
    task::sleep(600); // Wait for ball to get into intake
    
    forward(43.5, 60); // Drive into wall and 0
    task::sleep(600);
    backward(8); // Drive backwards to aim at flags
    
    if(side == "RED")
        turnRight(100);
    else
        turnLeft(100);
    
    forward(20, 60); // Shoot flags
    task::sleep(250);
    Shooter.rotateFor(200, rotationUnits::deg, 100, velocityUnits::pct);
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);
    
    if(side == "RED")
        turnLeft(10);
    else
        turnRight(15);
    task::sleep(1000);
    forward(53, 100); // Drive into bottom flags
}

// Front - 2 Flags 2 Caps
void autonFunc2(string side)
{
    task shooterTask = task(taskShooter, 1);
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);    
    
    // Set up catapult and back into the ball
    fire = true;
    backward(36, 40);
    
    // Intake the ball and flip the cap
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);
    task::sleep(300);
    Intake.spin(directionType::fwd, 100, velocityUnits::pct);
    task::sleep(600);    
    
    // Forward, center on wall, backwards
    forward(43.5, 80);
    task::sleep(600);
    backward(8);

    // Turn towards flags
    if(side == "RED")
        turnRight(100);
    else
        turnLeft(100);

    // Forward to get into position to shoot
    forward(20, 40);
    task::sleep(250);
    
    // Fire
    Shooter.rotateFor(200, rotationUnits::deg, 100, velocityUnits::pct);
    Intake.spin(directionType::fwd, 0, velocityUnits::pct);
    
    // Turn towards the next cap
    if(side == "RED")
        turnRight(55.5);
    else
        turnLeft(55.5);
    
    // Rotate the flipper down to get the cap
    Flipper.rotateFor(50, rotationUnits::deg, 100, velocityUnits::pct);
    
    // Drive into the cap
    forward(34, 50);
    
    // Flip the cap
    Flipper.rotateFor(-25, rotationUnits::deg, 100, velocityUnits::pct);  
    
}

void autonomous( void ) {
    FrontLeft.setStopping(brakeType::brake);
    FrontRight.setStopping(brakeType::brake);
    BackLeft.setStopping(brakeType::brake);
    BackRight.setStopping(brakeType::brake);    
    autonFunc1(side);
}

void usercontrol() {

    vex::task(taskShooter, 1);
    vex::task(taskDrive, 1);
    vex::task(taskIntakes, 1);
    Controller1.Screen.clearScreen();
    while(true)
    {   
        if (Controller1.ButtonY.pressing())
            Shooter.spin(directionType::fwd, 60, velocityUnits::pct);
        else if(!inUse)
            Shooter.stop(brakeType::coast);
        Controller1.Screen.print("Braked: %d, Inverted: %d, Battery: %d", braked, inverted, Brain.Battery.capacity(percentUnits::pct));        
        task::sleep(20);
    }
}

int main() {
    
    //Run the pre-autonomous function. 
    pre_auton();
    
    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
      vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    
    return 0;
       
}
